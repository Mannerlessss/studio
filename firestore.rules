rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Plans can be read by any authenticated user
    match /plans/{planId} {
      allow read: if request.auth != null;
      // Admin-only write access is handled by backend logic (Admin SDK)
      allow write: if false; 
    }

    // Offers can be read by any authenticated user
    match /offers/{offerId} {
      allow read: if request.auth != null;
      // Admin-only write access is handled by backend logic (Admin SDK)
      allow write: if false;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // A user can get, list, create, update, or delete their OWN user document.
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // This rule applies to all subcollections of a user document (e.g., investments, transactions).
      match /{subcollection=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Rules for collection group queries
    // This allows an admin to query all withdrawals regardless of which user they belong to.
    match /{path=**}/withdrawals/{withdrawalId} {
      // Authenticated users can read their own withdrawals via subcollection path.
      // Admins (validated by backend functions) can query across all users.
      // For client-side admin panels, you would typically rely on a Cloud Function proxy
      // or ensure the admin SDK is used, which bypasses these rules.
      // Since our admin panel logic is client-side for reads, we temporarily open this up,
      // assuming the admin panel is properly secured by auth checks.
      allow read: if request.auth != null;
      allow write: if request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
  }
}
