rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true || request.auth.token.admin == true;
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read/write any user document
      allow read, write: if isAdmin();
      // Users can create their own document, read their own document, and update specific fields
      allow create: if request.auth != null;
      allow get: if isOwner(userId);
      allow update: if isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'phone', 'lastLogin', 'hasCollectedSignupBonus', 'lastBonusClaim', 'redeemedOfferCodes']);
      // Any authenticated user can list users for referral leaderboard, but only specific fields
      allow list: if request.auth != null;
    }
    
    // Rules for subcollections within 'users'
    match /users/{userId}/{subcollection}/{docId} {
        // Admins have full access to all subcollections
        allow read, write: if isAdmin();
        
        // Users can read their own subcollection documents
        allow get: if isOwner(userId);
        
        // Specific create/update rules for users
        allow create: if isOwner(userId) && (subcollection == 'withdrawals' || subcollection == 'transactions');
    }

    // Rules for the 'offers' collection
    match /offers/{offerId} {
        // Only admins can create, update, or delete offers
        allow write: if isAdmin();
        // Any authenticated user can read the offers (e.g., to see if a code is valid)
        allow read: if request.auth != null;
    }
  }
}
