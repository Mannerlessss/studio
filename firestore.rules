rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth.token.admin == true;
    }

    // Rules for the `users` collection
    match /users/{userId} {
      // Allow create for any authenticated user (for sign-up)
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      
      // Allow read, update only for the owner of the document or an admin
      allow read, update: if isOwner(userId) || isAdmin();
      
      // Allow delete only for admin (should be handled via a backend function)
      allow delete: if isAdmin();
      
      // Sub-collections for a specific user
      match /{subcollection}/{docId} {
         // Allow read/write on subcollections only for the owner or admin
         allow read, write: if isOwner(userId) || isAdmin();
      }
      
      // Specific rule for the `referrals` subcollection to allow another user to write to it.
      // This is needed for the redeemReferralCode flow.
       match /referrals/{referralId} {
         // Owner can read their own referrals
         allow read: if isOwner(userId);
         // Any authenticated user can create a referral entry in someone else's list.
         // This is secure because the backend flow validates the code first.
         // We check that they are only setting specific, non-sensitive fields.
         allow create: if request.auth != null && request.resource.data.keys().hasAll(['userId', 'name', 'email', 'hasInvested', 'joinedAt']);
         
         // Only the owner of the main user document can update/delete.
         allow update, delete: if isOwner(userId);
       }
    }

    // Rules for the `offers` collection
    match /offers/{offerId} {
      // Any authenticated user can read the list of offers
      allow read: if request.auth != null;
      
      // Only admins can create, update, or delete offers
      allow write: if isAdmin();
    }
    
     // Rules for collection groups
    match /{path=**}/withdrawals/{withdrawalId} {
      // Only admins can query across all `withdrawals` subcollections
      allow read: if isAdmin();
    }
  }
}
