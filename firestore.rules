rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth.token.admin == true;
    }

    function isCreatingOwnDocument(userId) {
      return isOwner(userId) && !exists(/databases/$(database)/documents/users/$(userId));
    }
    
    // Allow users to read other users' referral codes for validation.
    // This is a minimal read, only allowing access to specific, non-sensitive fields.
    function canReadPublicUserData() {
      return request.auth != null;
    }

    // --- Users Collection Rules ---
    match /users/{userId} {
      // Allow create for new users signing up.
      // Allow read/update for document owners and admins.
      // Allow delete only for admins.
      allow read, update, delete: if isAdmin();
      allow create: if isCreatingOwnDocument(userId);
      allow get: if isOwner(userId);
      
      // A user can update their own name and phone number.
      // Other fields are protected and updated via server-side flows.
      allow update: if isOwner(userId)
                    && request.resource.data.keys().hasOnly(['name', 'phone', 'lastLogin']);
    
      // --- User Subcollections ---
      match /investments/{investmentId} {
        // Only owners and admins can read investments.
        // Investments are created/updated server-side.
        allow read: if isOwner(userId) || isAdmin();
        allow create, update, delete: if false; // Managed by backend flows
      }
      
      match /transactions/{transactionId} {
        // Owners and admins can read transactions.
        // Transactions are created server-side.
        allow read: if isOwner(userId) || isAdmin();
        allow create, update, delete: if false; // Managed by backend flows
      }
      
      match /withdrawals/{withdrawalId} {
        // Owners and admins can read withdrawal requests.
        // Owners can create them. Updates are done by admins server-side.
        allow read: if isOwner(userId) || isAdmin();
        allow create: if isOwner(userId);
        allow update, delete: if false; // Managed by backend flows
      }

      match /referrals/{referralId} {
          allow read: if isOwner(userId) || isAdmin();
          allow create, update, delete: if false; // Managed by backend flows
      }
    }
    
    // --- Offers Collection Rules ---
    match /offers/{offerId} {
        // Any authenticated user can read offers to check them.
        // Only admins can create, update, or delete them.
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
  }
}