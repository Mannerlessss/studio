rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth.token.admin == true;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can do anything.
      // Users can read their own document.
      allow read: if isAdmin() || isOwner(userId);

      // Admins can create/delete user documents.
      // Users can create their own document when signing up.
      allow create: if isAdmin() || isOwner(userId);

      // Admins can update any user document.
      // Users can only update their own 'name' and 'phone' fields.
      allow update: if isAdmin() || (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'phone', 'lastLogin', 'hasCollectedSignupBonus', 'lastBonusClaim', 'redeemedOfferCodes', 'usedReferralCode', 'referredBy']));
      
      // Only admins can delete user documents.
      allow delete: if isAdmin();

      // Rules for subcollections within a user document
      match /{subcollection}/{docId} {
        // Admins can do anything.
        // Users can read/write to their own subcollections.
        allow read, write: if isAdmin() || isOwner(userId);
      }
    }

    // Rules for the 'offers' collection
    match /offers/{offerId} {
        // Allow read for any authenticated user (so they can see offer details if needed).
        // Allow write only for admins.
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
  }
}
